// Copyright 2019 Caffeine Inc. All rights reserved.

#ifndef LIBCAFFEINE_CAFFEINE_H
#define LIBCAFFEINE_CAFFEINE_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
#define CAFFEINE_LINKAGE extern "C"
#else
#define CAFFEINE_LINKAGE
#endif

#if defined(LIBCAFFEINE_LIBRARY)
#if defined(_WIN32)
#define CAFFEINE_API CAFFEINE_LINKAGE __declspec(dllexport)
#else
#define CAFFEINE_API CAFFEINE_LINKAGE __attribute__((visibility("default")))
#endif
#elif defined(_WIN32)
#define CAFFEINE_API CAFFEINE_LINKAGE __declspec(dllimport)
#else
#define CAFFEINE_API CAFFEINE_LINKAGE
#endif

/* Log severities mapped from WebRTC */
typedef enum caff_log_sensitivity {
    CAFF_LOG_SENSITIVE,
    CAFF_LOG_VERBOSE,
    CAFF_LOG_INFO,
    CAFF_LOG_WARNING,
    CAFF_LOG_ERROR,
    CAFF_LOG_NONE,
} caff_log_severity;

/* Video formats mapped from WebRTC */
typedef enum caff_format {
    CAFF_FORMAT_UNKNOWN,
    CAFF_FORMAT_I420,
    CAFF_FORMAT_IYUV,
    CAFF_FORMAT_RGB24,
    CAFF_FORMAT_ABGR,
    CAFF_FORMAT_ARGB,
    CAFF_FORMAT_ARGB4444,
    CAFF_FORMAT_RGB565,
    CAFF_FORMAT_ARGB1555,
    CAFF_FORMAT_YUY2,
    CAFF_FORMAT_YV12,
    CAFF_FORMAT_UYVY,
    CAFF_FORMAT_MJPEG,
    CAFF_FORMAT_NV21,
    CAFF_FORMAT_NV12,
    CAFF_FORMAT_BGRA,
} caff_format;

/* Errors generated by caffeine layer */
typedef enum caff_error {
    CAFF_ERROR_SDP_OFFER,
    CAFF_ERROR_SDP_ANSWER,
    CAFF_ERROR_ICE_TRICKLE,
    CAFF_ERROR_TAKEOVER,
    CAFF_ERROR_DISCONNECTED,
    CAFF_ERROR_BROADCAST_FAILED,
    CAFF_ERROR_UNKNOWN,
} caff_error;

/* Content rating for broadcasts */
typedef enum caff_rating {
    CAFF_RATING_NONE,
    CAFF_RATING_SEVENTEEN_PLUS,
    CAFF_RATING_MAX,
} caff_rating;

/* Rough measure of connection quality, reported by Caffeine's back-end */
typedef enum caff_connection_quality {
    CAFF_CONNECTION_QUALITY_GOOD,
    CAFF_CONNECTION_QUALITY_BAD,
    CAFF_CONNECTION_QUALITY_UNKNOWN,
} caff_connection_quality;

/* Opaque handles to internal objects */
struct caff_interface;
typedef struct caff_interface* caff_interface_handle;

struct caff_credentials;
typedef struct caff_credentials * caff_credentials_handle;

struct caff_stream;
typedef struct caff_stream* caff_stream_handle;

/* Result of sign-in attempt */
typedef struct caff_auth_response {
    caff_credentials_handle credentials;
    char * next;
    char * mfa_otp_method;
} caff_auth_response;

/* User details */
typedef struct caff_user_info {
    char * caid;
    char * username;
    char * stage_id;
    bool can_broadcast;
} caff_user_info;

/* TODO: is there a way to encapsulate this without touching on privacy issues? */

/* Supported game detection info */
typedef struct caff_game_info {
    char * id;
    char * name;
    char ** process_names;
    size_t num_process_names;
} caff_game_info;

typedef struct caff_games {
    caff_game_info ** game_infos;
    size_t num_games;
} caff_games;

/* Callback type for WebRTC log messages */
typedef void(*caff_log_callback)(caff_log_severity severity, char const* message);

/* Callback types for starting stream */
typedef void(*caff_stream_started)(void* user_data);
typedef void(*caff_stream_failed)(void* user_data, caff_error error);

/* Get string representation of error enum
 *
 * TODO: localization support
 *
 * error: the error code
 *
 * Returns a string representing the given error or "Unknown" if out of range
 */
CAFFEINE_API char const* caff_error_string(caff_error error);

/* Initialize the Caffeine library
 *
 * log_callback: a function to call for WebRTC generated log messages
 * min_severity: sets the lowest log severity required for the callback to fire
 *
 * Returns a handle to the caffeine management object to be passed into other
 * functions. If there is an error during initialization this will be NULL
 */
CAFFEINE_API caff_interface_handle caff_initialize(caff_log_callback log_callback, caff_log_severity min_severity);

/* Start stream on Caffeine
 *
 * Sets up the WebRTC connection with Caffeine asynchronously. Calls
 * into started_callback or failed_callback with the result. This may
 * happen on a different thread than the caller.
 *
 * interface_handle: handle to the caffeine interface from caff_initialize
 * user_data: an optional pointer passed blindly to the callbacks
 * started_callback: called when stream successfully starts
 * failed_callback: called when stream fails to start
 *
 * returns a handle to the stream. If an error occurs before starting
 * the asynchronous operation, the handle will be NULL and the
 * failed_callback will NOT be called
 */
CAFFEINE_API caff_stream_handle caff_start_stream(
    caff_interface_handle interface_handle,
    void* user_data,
    caff_credentials_handle credentials,
    char const * username,
    char const * title,
    caff_rating rating,
    caff_stream_started started_callback,
    caff_stream_failed failed_callback);

/* TODO pass format, channels, etc */
CAFFEINE_API void caff_send_audio(caff_stream_handle stream_handle, uint8_t* samples, size_t samples_per_channel);

/* todo pass pixel format */
CAFFEINE_API void caff_send_video(
    caff_stream_handle stream_handle,
    uint8_t const* frame_data,
    size_t frame_bytes,
    int32_t width,
    int32_t height,
    caff_format format);

CAFFEINE_API caff_connection_quality caff_get_connection_quality(caff_stream_handle stream_handle);

/* End a Caffeine stream
 *
 * This signals the server to end the stream and closes the RTC connection.
 *
 * stream_handle: the stream handle received from caff_start_stream.
 *     This handle will no longer be valid after the function returns.
 */
CAFFEINE_API void caff_end_stream(caff_stream_handle* stream_handle);

/* Deinitialize Caffeine library
 *
 * This destroys the internal factory objects, shuts down worker threads, etc.
 *
 * interface_handle: the interface handle received from caff_initialize. This
 *     handle will no longer be valid after the function returns.
 */
CAFFEINE_API void caff_deinitialize(caff_interface_handle* interface_handle);

/* TODO: sort these into above, and document */
/* TODO: have the Interface own more of these to reduce API footprint */
CAFFEINE_API caff_auth_response * caff_signin(char const * username, char const * password, char const * otp);
CAFFEINE_API bool caff_is_supported_version();
CAFFEINE_API caff_credentials_handle caff_refresh_auth(char const * refresh_token);
CAFFEINE_API void caff_free_credentials(caff_credentials_handle * creds);
CAFFEINE_API void caff_free_auth_response(caff_auth_response ** auth_response);
CAFFEINE_API void caff_free_user_info(caff_user_info ** user_info);
CAFFEINE_API char const * caff_refresh_token(caff_credentials_handle creds);
CAFFEINE_API caff_user_info * caff_get_user_info(caff_credentials_handle creds);
CAFFEINE_API caff_games * caff_get_supported_games();
CAFFEINE_API void caff_free_game_info(caff_game_info ** info);
CAFFEINE_API void caff_free_game_list(caff_games ** games);

#endif /* LIBCAFFEINE_CAFFEINE_H */
